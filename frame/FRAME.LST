Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 1
frame.asm



      1	    0000			 .model	tiny
      2					 .386
      3	    0000			 .code
      4					 org 100h
      5					 locals	@@
      6
      7		  =0070			 WBACK_BFRONT equ 70h
      8		  =0007			 BBACK_WFRONT equ 07h
      9
     10	    0100			 Start:
     11	    0100  EB 01	90		 jmp main		 ; jump	to the main function
     12
     13					 ; The main function
     14	    0103			 main		     proc
     15
     16	    0103  BB B800		     mov bx, 0b800h	     ; Puts to es offset to a vmem adress
     17	    0106  8E C3			     mov es, bx
     18
     19	    0108  E8 0059		     call parseConsole		   ; Parse data	from command line
     20
     21	    010B			     @@mainLoop:
     22
     23	    010B  E8 0010		     call clearDisplay		    ; clearDisplay monitor
     24
     25	    010E  E8 0163		     call drawFrame	 ; Display border
     26
     27	    0111  E8 0012		     call checkInput	    ; Check input(pressed keys)
     28
     29	    0114  E8 0007		     call clearDisplay		    ; clearDisplay monitor
     30
     31	    0117  EB F2			     jmp @@mainLoop
     32
     33					 ;---------------------------------------------------------------
     34	    0119			 exitProgramm:
     35	    0119  B8 4C00		     mov ax, 4c00h	     ; Terminate programm
     36	    011C  CD 21			     int 21h
     37	    011E					     endp
     38
     39					 ; Function that clean monitor
     40					 ; Destroy	     AH, DX
     41	    011E			 clearDisplay		    proc
     42	    011E  B4 09			     mov ah, 09h
     43	    0120  BA 003Er		     mov dx, offset CLEAN_MONITOR
     44	    0123  CD 21			     int 21h
     45
     46	    0125  C3			     ret
     47	    0126					     endp
     48					 ;---------------------------------------------------------------
     49					 include data.asm
1    50	    0126			 .data
1    51	    0000  C9 CD	BB BA B0 BA C8+		 FIRST_BORDER	 db 0c9h, 0cdh,	0bbh, 0bah, 0b0h, 0bah,	0c8h, 0cdh, 0bch, '$'
     52		  CD BC	24
1    53	    000A  2F 2D	5C 7C 20 7C 5C+		 SECOND_BORDER	 db "/-\| |\-/", '$'
     54		  2D 2F	24
1    55	    0014  2B 2D	2B 7C 20 7C 2B+		 THIRD_BORDER	 db "+-+| |+-+"
     56		  2D 2B
1    57	    001D  03 5F	03 03 00 03 03+		 FOURTH_BORDER	 db 03h, 5fh, 03h, 03h,	00h, 03h, 03h, 2dh, 03h
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 2
frame.asm



     58		  2D 03
1    59	    0026  07 4D	45 4F 57 20 3C+		 TABLE_NAME	 db 7d,"MEOW <3", '$'
     60		  33 24
1    61
1    62	    002F  09 24				 USER_BORDER	 db 9d,	'$'
1    63	    0031  0A				 BORDER_WIDTH	 db 10d
1    64	    0032  0A				 BORDER_HEIGHT	 db 10d
1    65	    0033  01				 BORDER_MODE	 db 01d
1    66	    0034  00				 TEXT_POSITION	 db 00d
1    67	    0035  01				 CURRENT_LINE	 db 01d
1    68	    0036  00				 LINE_COUNT	 db 00d
1    69
1    70	    0037  45 72	72 6F 72 21 24		 ERROR_MESSAGE	 db "Error!", '$'
1    71	    003E  0780*(20) 24			 CLEAN_MONITOR	 db 80*24 dup('	'), '$'
1    72	    07BF			 .code
     73					 ;---------------------------------------------------------------
     74					 include input.asm
1    75	    0126			 checkInput	 proc
1    76
1    77	    0126  B4 01					 mov ah, 01h
1    78	    0128  CD 21					 int 21h
1    79	    012A  3C 71					 cmp al, 'q'
1    80
1    81	    012C  74 EB					 je exitProgramm
1    82
1    83	    012E  3C 50					 cmp al, 50h
1    84	    0130  74 09	90 90				 je incCurrentLine
1    85
1    86	    0134  3C 48					 cmp al, 48h
1    87	    0136  74 14	90 90				 je decCurrentLine
1    88
1    89	    013A  C3					 ret
1    90
1    91	    013B					 incCurrentLine:
1    92	    013B  A0 0035r					 mov al, CURRENT_LINE
1    93
1    94	    013E  3A 06	0033r					 cmp al, BORDER_HEIGHT + 1
1    95	    0142  74 16	90 90					 je @@return
1    96
1    97	    0146  FE C0						 inc al
1    98
1    99	    0148  A2 0035r					 mov CURRENT_LINE, al
1   100
1   101	    014B  C3						 ret
1   102
1   103	    014C					 decCurrentLine:
1   104	    014C  A0 0035r					 mov al, CURRENT_LINE
1   105
1   106	    014F  3C 02						 cmp al, 2d
1   107	    0151  74 07	90 90					 je @@return
1   108
1   109	    0155  FE C8						 dec al
1   110
1   111	    0157  A2 0035r					 mov CURRENT_LINE, al
1   112
1   113	    015A						 @@return:
1   114	    015A  C3							 ret
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 3
frame.asm



1   115
1   116	    015B					 endp
    117					 ;---------------------------------------------------------------
    118					 include error.asm
1   119	    015B			 printErrorMessage:
1   120	    015B  B4 09				 mov ah, 09h
1   121	    015D  BA 0037r			 mov dx, offset	ERROR_MESSAGE
1   122	    0160  CD 21				 int 21h
1   123
1   124	    0162  EB B5				 jmp exitProgramm
    125					 ;---------------------------------------------------------------
    126					 include parser.asm
1   127	    0164			 parseConsole	 proc
1   128
1   129	    0164  BF 0082				 mov di, 82h
1   130
1   131	    0167  E8 00B3				 call skipSpaces
1   132	    016A  E8 007B				 call parseNumber
1   133
1   134	    016D  3C 4E					 cmp al, 78d
1   135
1   136	    016F  77 EA					 ja printErrorMessage
1   137
1   138	    0171  A2 0031r				 mov [BORDER_WIDTH], byte ptr al
1   139
1   140	    0174  E8 00A6				 call skipSpaces
1   141	    0177  E8 006E				 call parseNumber
1   142
1   143	    017A  3C 16					 cmp al, 22d
1   144
1   145	    017C  77 DD					 ja printErrorMessage
1   146
1   147	    017E  A2 0032r				 mov [BORDER_HEIGHT], byte ptr al
1   148
1   149	    0181  E8 0099				 call skipSpaces
1   150	    0184  E8 0061				 call parseNumber
1   151
1   152	    0187  A2 0033r				 mov [BORDER_MODE], byte ptr al
1   153
1   154	    018A  E8 0090				 call skipSpaces
1   155
1   156	    018D  33 C0					 xor ax, ax
1   157	    018F  8B C7					 mov ax, di
1   158
1   159	    0191  A2 0034r				 mov TEXT_POSITION, byte ptr al
1   160
1   161	    0194  57					 push di
1   162	    0195  33 C9					 xor cx, cx
1   163
1   164	    0197					 @@next:
1   165	    0197  E8 0083				 call skipSpaces
1   166	    019A  E8 002F				 call textLength
1   167
1   168	    019D  3A 06	0031r				 cmp al, BORDER_WIDTH
1   169	    01A1  73 B8					 jae printErrorMessage
1   170
1   171	    01A3  FE C1					 inc cl
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 4
frame.asm



1   172
1   173	    01A5  8B C7					 mov ax, di
1   174	    01A7  BB 0080				 mov bx, 80h
1   175
1   176	    01AA  2D 0080				 sub ax, 128d
1   177
1   178	    01AD  3A 07					 cmp al, byte ptr [bx]
1   179	    01AF  73 04	90 90				 jae @@endLoop
1   180
1   181	    01B3  EB E2					 jmp @@next
1   182
1   183	    01B5					 @@endLoop:
1   184	    01B5  5F					 pop di
1   185
1   186	    01B6  88 0E	0036r				 mov LINE_COUNT, cl
1   187
1   188	    01BA  3A 0E	0032r				 cmp cl, BORDER_HEIGHT
1   189	    01BE  77 9B					 ja printErrorMessage
1   190
1   191	    01C0  C3					 ret
1   192	    01C1					 endp
1   193
1   194	    01C1			 wordLength	 proc
1   195
1   196	    01C1					 @@startCounterLoop:
1   197	    01C1  80 3D	20				 cmp byte ptr [di], ' '
1   198	    01C4  74 05	90 90				 je @@endCounterLoop
1   199
1   200	    01C8  47					 inc di
1   201
1   202	    01C9  EB F6					 jmp @@startCounterLoop
1   203
1   204	    01CB					 @@endCounterLoop:
1   205
1   206	    01CB  C3					 ret
1   207	    01CC					 endp
1   208
1   209	    01CC			 textLength	 proc
1   210
1   211	    01CC  8B C7					 mov ax, di
1   212
1   213	    01CE					 @@next:
1   214	    01CE  80 3D	24				 cmp byte ptr [di], '$'
1   215	    01D1  74 0D	90 90				 je @@endLoop
1   216
1   217	    01D5  47					 inc di
1   218
1   219	    01D6  81 FF	00FF				 cmp di, 255d
1   220	    01DA  0F 83	FF7D				 jae printErrorMessage
1   221
1   222	    01DE  EB EE					 jmp @@next
1   223	    01E0					 @@endLoop:
1   224
1   225	    01E0  57					 push di
1   226
1   227	    01E1  2B F8					 sub di, ax
1   228	    01E3  8B C7					 mov ax, di
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 5
frame.asm



1   229
1   230	    01E5  5F					 pop di
1   231	    01E6  47					 inc di
1   232
1   233	    01E7  C3					 ret
1   234	    01E8					 endp
1   235
1   236	    01E8			 parseNumber	 proc
1   237
1   238	    01E8  8B DF					 mov bx, di
1   239
1   240	    01EA  E8 FFD4				 call wordLength
1   241
1   242	    01ED  2B FB					 sub di, bx
1   243	    01EF  8B CF					 mov cx, di
1   244	    01F1  8B FB					 mov di, bx
1   245
1   246	    01F3  83 F9	03				 cmp cx, 3d
1   247	    01F6  0F 83	FF61				 jae printErrorMessage
1   248
1   249	    01FA  83 F9	00				 cmp cx, 0d
1   250	    01FD  0F 84	FF5A				 je  printErrorMessage
1   251
1   252	    0201  33 C0					 xor ax, ax
1   253
1   254	    0203  83 F9	02				 cmp cx, 2d
1   255	    0206  75 0D	90 90				 jne @@addLastPart
1   256
1   257	    020A  8A 05					 mov al, byte ptr [di]
1   258	    020C  2C 30					 sub al, '0'
1   259
1   260	    020E  B4 0A					 mov ah, 10d
1   261	    0210  F6 E4					 mul ah
1   262	    0212  8A E0					 mov ah, al
1   263
1   264	    0214  47					 inc di
1   265
1   266	    0215					 @@addLastPart:
1   267	    0215  8A 05					 mov al, byte ptr [di]
1   268	    0217  2C 30					 sub al, '0'
1   269	    0219  02 C4					 add al, ah
1   270
1   271	    021B  47					 inc di
1   272
1   273	    021C  C3					 ret
1   274	    021D					 endp
1   275
1   276	    021D			 skipSpaces	 proc
1   277
1   278	    021D					 @@next:
1   279	    021D  80 3D	20				 cmp byte ptr [di], ' '
1   280	    0220  75 05	90 90				 jne @@end
1   281
1   282	    0224  47					 inc di
1   283
1   284	    0225  EB F6					 jmp @@next
1   285	    0227					 @@end:
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 6
frame.asm



1   286
1   287	    0227  C3					 ret
1   288	    0228					 endp
    289					 ;---------------------------------------------------------------
    290
    291					 ; Write text line to display
    292					 ; Entry	     AH	- color	atribute
    293					 ;		     SI	- offset of memory
    294					 ;		     DI	- pointer to string
    295					 ; Assumes	     ES	= 0b800h
    296					 ; Destr	     SI, CX, DI, AX
    297	    0228			 printString	    proc
    298	    0228  8A 0D			     mov cl, [di]	; get count of symbols
    299	    022A  47			     inc di
    300	    022B  50			     push ax
    301
    302	    022C  2B F1			     sub si, cx
    303
    304	    022E  8B C6			     mov ax, si		; check	aligment of symbols
    305	    0230  25 0001		     and ax, 1
    306	    0233  03 F0			     add si, ax
    307
    308	    0235  83 C6	02		     add si, 2d
    309
    310	    0238  58			     pop ax
    311	    0239			     @@next:
    312	    0239  8A 05				 mov al, byte ptr [di]
    313	    023B  26: 89 04			 mov es:[si], ax
    314	    023E  83 C6	02			 add si, 2d
    315	    0241  47				 inc di
    316	    0242  E2 F5			     loop @@next
    317
    318	    0244  C3			     ret
    319	    0245					     endp
    320
    321					 ; Write 3 special symbols
    322					 ; Entry	     AH	- background color atribute
    323					 ;		     DI	- special line position
    324					 ;		     CX	- count	of central symbols
    325					 ;		     BX	- offset of memory
    326					 ; Assumes	     ES	= 0b800h
    327					 ; Destr	     AL, DI, CX
    328	    0245			 printLine	    proc
    329	    0245  8A 05			     mov al, byte ptr [di]		 ; write first symbol
    330	    0247  26: 89 07		     mov es:[bx], ax
    331	    024A  83 C3	02		     add bx, 2d
    332	    024D  47			     inc di
    333
    334	    024E  8A 05			     mov al, byte ptr [di]		 ; Write second	N symbols of line
    335	    0250			     @@next:
    336	    0250  26: 89 07			 mov es:[bx], ax
    337	    0253  83 C3	02			 add bx, 2d
    338	    0256  E2 F8			     loop @@next
    339	    0258  47			     inc di
    340
    341	    0259  8A 05			     mov al, byte ptr [di]		 ; write first symbol
    342	    025B  26: 89 07		     mov es:[bx], ax
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 7
frame.asm



    343	    025E  83 C3	02		     add bx, 2d
    344	    0261  47			     inc di
    345
    346	    0262  C3			     ret
    347	    0263					     endp
    348
    349					 ; Shift to the	next line function
    350					 ; Entry	     BX	- memory adress
    351					 ; Destr	     BX, AX
    352					 ; Return	     BX	position of the	next line
    353	    0263			 shiftToNextLine  proc
    354	    0263  33 C0			     xor ax, ax
    355	    0265  A0 0031r		     mov al, BORDER_WIDTH
    356	    0268  2B D8			     sub bx, ax
    357	    026A  2B D8			     sub bx, ax
    358	    026C  83 EB	04		     sub bx, 4d
    359	    026F  81 C3	00A0		     add bx, 160d
    360	    0273  C3			     ret
    361	    0274					     endp
    362
    363					 ; Write border	in the midle on	the monitor
    364					 ; Entry	     CX	- width	of the border
    365					 ;		     AH	- height of the	border
    366					 ; Assumes	     ES	= 0b800h
    367					 ; Destr	     CX, AX, BX, SI, DI, DX
    368	    0274			 drawFrame	 proc
    369	    0274  33 C9			     xor cx, cx
    370	    0276  8A 0E	0032r		     mov cl, BORDER_HEIGHT	 ; get border height
    371
    372	    027A  B8 0019		     mov ax, 25d		 ; 25 -	border height
    373	    027D  2B C1			     sub ax, cx
    374
    375	    027F  D1 E8			     shr ax, 1			 ; ax/2
    376	    0281  BB 00A0		     mov bx, 160d
    377
    378	    0284  F7 E3			     mul bx			 ; ax *	160
    379
    380	    0286  8B D8			     mov bx, ax			 ; get start position
    381
    382					 ;------------------------------------------------------
    383					 ;get position by OX
    384	    0288  33 C9			     xor cx, cx
    385	    028A  8A 0E	0031r		     mov cl, BORDER_WIDTH	 ; get border width in cl
    386
    387	    028E  B8 0050		     mov ax, 80d		 ; 80 -	BORDER_WIDTH
    388	    0291  2B C1			     sub ax, cx
    389					 ;--------------------------------
    390	    0293  53			     push bx			 ; save	bx
    391
    392	    0294  8B D8			     mov bx, ax			 ; this	part for aligment by even numbers adress
    393	    0296  83 E3	01		     and bx, 1
    394	    0299  03 C3			     add ax, bx
    395
    396	    029B  5B			     pop bx			 ; repair bx
    397					 ;--------------------------------
    398	    029C  03 D8			     add bx, ax
    399	    029E  83 EB	02		     sub bx, 2d
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 8
frame.asm



    400
    401	    02A1  8B F3			     mov si, bx		 ; get center of border
    402	    02A3  33 C0			     xor ax, ax
    403	    02A5  A0 0031r		     mov al, BORDER_WIDTH
    404	    02A8  03 F0			     add si, ax
    405
    406					 ;------------------------------------------------
    407
    408	    02AA  E8 0077		     call selectMode			; set border style
    409
    410	    02AD  B4 70			     mov ah, WBACK_BFRONT      ; Write first line
    411	    02AF  E8 FF93		     call printLine
    412	    02B2  57			     push di
    413
    414	    02B3  BF 0026r		     mov di, offset TABLE_NAME		 ; write border	name
    415	    02B6  E8 FF6F		     call printString
    416	    02B9  5F			     pop di
    417
    418	    02BA  8A 16	0032r		     mov dl, BORDER_HEIGHT		 ; write border	body
    419
    420	    02BE  33 C9			     xor cx, cx
    421	    02C0  8A 0E	0034r		     mov cl, TEXT_POSITION
    422	    02C4  8B F1			     mov si, cx
    423
    424	    02C6			     @@next:
    425	    02C6  FE CA				 dec dl
    426
    427	    02C8  E8 FF98			 call shiftToNextLine
    428	    02CB  8A 0E	0031r			 mov cl, BORDER_WIDTH
    429
    430					 ;-------------------------------------------------------------
    431	    02CF  8A 26	0032r			 mov ah, BORDER_HEIGHT		 ; Select line color
    432	    02D3  2A E2				 sub ah, dl
    433	    02D5  3A 26	0035r			 cmp ah, CURRENT_LINE
    434	    02D9  74 45	90 90			 je setCurrentColor
    435	    02DD  B4 70				 mov ah, WBACK_BFRONT
    436	    02DF				 returnToLoop:
    437					 ;-------------------------------------------------------------
    438
    439	    02DF  E8 FF63			 call printLine
    440
    441	    02E2  A0 0032r			 mov al, BORDER_HEIGHT		 ; get current line number
    442	    02E5  2A C2				 sub al, dl
    443
    444	    02E7  3A 06	0036r			 cmp al, LINE_COUNT		 ; current line	> LINE_COUNT
    445	    02EB  77 1B	90 90			 ja @@skipTextLine
    446
    447	    02EF				 @@skipNext:			; skip spaces before string
    448	    02EF  80 3C	20			 cmp [si], byte	ptr ' '
    449	    02F2  75 05	90 90			 jne @@skipEnd
    450	    02F6  46				     inc si
    451	    02F7  EB F6				 jmp @@skipNext
    452	    02F9				 @@skipEnd:
    453
    454	    02F9  53				 push bx			 ; Save	bx
    455
    456	    02FA  33 C9				 xor cx, cx
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 9
frame.asm



    457	    02FC  8A 0E	0031r			 mov cl, BORDER_WIDTH		 ; get write position
    458	    0300  2B D9				 sub bx, cx
    459	    0302  2B D9				 sub bx, cx
    460
    461	    0304  E8 0051			 call printTextLineIntoBox
    462
    463	    0307  5B				 pop bx				 ; Repair bx
    464	    0308				 @@skipTextLine:
    465
    466	    0308  83 EF	03			 sub di, 3d
    467
    468	    030B  80 FA	00		     cmp dl, 0
    469	    030E  75 B6			     jne @@next
    470
    471	    0310  E8 FF50		     call shiftToNextLine
    472	    0313  83 C7	03		     add di, 3d
    473
    474	    0316  B4 70			     mov ah, WBACK_BFRONT      ; write last line
    475	    0318  8A 0E	0031r		     mov cl, BORDER_WIDTH
    476	    031C  E8 FF26		     call printLine
    477
    478	    031F  C3			     ret
    479	    0320					     endp
    480
    481					 ; Function set	Black background and white text
    482					 ; Destroy	     AH
    483	    0320			 setCurrentColor:
    484	    0320  B4 07			     mov ah, BBACK_WFRONT
    485	    0322  EB BB			     jmp returnToLoop
    486
    487
    488					 ; Select border mode by code //TODO: a[i]
    489					 ; Destroy	     AH
    490					 ; Return	     DI	- the position of the first symbol of selected border
    491	    0324			 selectMode	    proc
    492	    0324  8A 26	0033r		     mov ah, [BORDER_MODE]
    493
    494	    0328  80 FC	01		     cmp ah, 1d
    495	    032B  74 1B	90 90			 je @FIRST_MODE
    496	    032F  80 FC	02		     cmp ah, 2d
    497	    0332  74 18	90 90			 je @SECOND_MODE
    498	    0336  80 FC	03		     cmp ah, 3d
    499	    0339  74 15	90 90			 je @THIRD_MODE
    500	    033D  80 FC	04		     cmp ah, 4d
    501	    0340  74 12	90 90			 je @FOURTH_MODE
    502
    503
    504	    0344  BF 0000r		     mov di, offset FIRST_BORDER
    505	    0347  C3			     ret
    506
    507	    0348			     @FIRST_MODE:
    508	    0348  BF 0000r			 mov di, offset	FIRST_BORDER
    509	    034B  C3				 ret
    510	    034C			     @SECOND_MODE:
    511	    034C  BF 000Ar			 mov di, offset	SECOND_BORDER
    512	    034F  C3				 ret
    513	    0350			     @THIRD_MODE:
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 10
frame.asm



    514	    0350  BF 0014r			 mov di, offset	THIRD_BORDER
    515	    0353  C3				 ret
    516
    517	    0354			     @FOURTH_MODE:
    518	    0354  BF 001Dr			 mov di, offset	FOURTH_BORDER
    519	    0357  C3				 ret
    520
    521	    0358					     endp
    522
    523					 ; Write text from input
    524					 ; Entry	     BX	- position
    525					 ; Asumes	     ES	= 0b800h
    526					 ; Destroy	     SI, BX
    527	    0358			 printTextLineIntoBox proc
    528
    529	    0358			     @@next:
    530	    0358  80 3C	24		     cmp [si], byte ptr	'$'		  ; Check line terminator
    531	    035B  74 0D	90 90		     je	@@endLoop
    532
    533	    035F  8A 04			     mov al, byte ptr [si]
    534	    0361  26: 89 07		     mov es:[bx], ax
    535
    536	    0364  83 C3	02		     add bx, 2d
    537	    0367  46			     inc si
    538
    539	    0368  EB EE			     jmp @@next
    540
    541	    036A			     @@endLoop:
    542
    543	    036A  46			     inc si			 ; go to next symbol after $
    544
    545	    036B  C3			     ret
    546	    036C					     endp
    547
    548					 end Start
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/13/25"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "05:06:49"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@ADDLASTPART			  Near	 DGROUP:0215
@@END				  Near	 DGROUP:0227
@@ENDCOUNTERLOOP		  Near	 DGROUP:01CB
@@ENDLOOP			  Near	 DGROUP:01B5
@@ENDLOOP			  Near	 DGROUP:01E0
@@ENDLOOP			  Near	 DGROUP:036A
@@MAINLOOP			  Near	 DGROUP:010B
@@NEXT				  Near	 DGROUP:0197
@@NEXT				  Near	 DGROUP:01CE
@@NEXT				  Near	 DGROUP:021D
@@NEXT				  Near	 DGROUP:0239
@@NEXT				  Near	 DGROUP:0250
@@NEXT				  Near	 DGROUP:02C6
@@NEXT				  Near	 DGROUP:0358
@@RETURN			  Near	 DGROUP:015A
@@SKIPEND			  Near	 DGROUP:02F9
@@SKIPNEXT			  Near	 DGROUP:02EF
@@SKIPTEXTLINE			  Near	 DGROUP:0308
@@STARTCOUNTERLOOP		  Near	 DGROUP:01C1
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@FIRST_MODE			  Near	 DGROUP:0348
@FOURTH_MODE			  Near	 DGROUP:0354
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@SECOND_MODE			  Near	 DGROUP:034C
@STACK				  Text	 DGROUP
@THIRD_MODE			  Near	 DGROUP:0350
@WORDSIZE			  Text	 2
BBACK_WFRONT			  Number 0007
BORDER_HEIGHT			  Byte	 DGROUP:0032
BORDER_MODE			  Byte	 DGROUP:0033
BORDER_WIDTH			  Byte	 DGROUP:0031
CHECKINPUT			  Near	 DGROUP:0126
CLEAN_MONITOR			  Byte	 DGROUP:003E
CLEARDISPLAY			  Near	 DGROUP:011E
CURRENT_LINE			  Byte	 DGROUP:0035
DECCURRENTLINE			  Near	 DGROUP:014C
DRAWFRAME			  Near	 DGROUP:0274
ERROR_MESSAGE			  Byte	 DGROUP:0037
EXITPROGRAMM			  Near	 DGROUP:0119
FIRST_BORDER			  Byte	 DGROUP:0000
FOURTH_BORDER			  Byte	 DGROUP:001D
INCCURRENTLINE			  Near	 DGROUP:013B
Turbo Assembler	 Version 4.1	    02/13/25 05:06:49	    Page 12
Symbol Table



LINE_COUNT			  Byte	 DGROUP:0036
MAIN				  Near	 DGROUP:0103
PARSECONSOLE			  Near	 DGROUP:0164
PARSENUMBER			  Near	 DGROUP:01E8
PRINTERRORMESSAGE		  Near	 DGROUP:015B
PRINTLINE			  Near	 DGROUP:0245
PRINTSTRING			  Near	 DGROUP:0228
PRINTTEXTLINEINTOBOX		  Near	 DGROUP:0358
RETURNTOLOOP			  Near	 DGROUP:02DF
SECOND_BORDER			  Byte	 DGROUP:000A
SELECTMODE			  Near	 DGROUP:0324
SETCURRENTCOLOR			  Near	 DGROUP:0320
SHIFTTONEXTLINE			  Near	 DGROUP:0263
SKIPSPACES			  Near	 DGROUP:021D
START				  Near	 DGROUP:0100
TABLE_NAME			  Byte	 DGROUP:0026
TEXTLENGTH			  Near	 DGROUP:01CC
TEXT_POSITION			  Byte	 DGROUP:0034
THIRD_BORDER			  Byte	 DGROUP:0014
USER_BORDER			  Byte	 DGROUP:002F
WBACK_BFRONT			  Number 0070
WORDLENGTH			  Near	 DGROUP:01C1

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  07BF Word	  Public  DATA
  _TEXT				  16  036C Word	  Public  CODE
